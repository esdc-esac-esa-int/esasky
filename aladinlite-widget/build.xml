<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml

 absi-cl-aladinlite-widget  -  Absi AladinLite GWT Widget
 Copyright (C) 2014-  ESA - ESAC - Madrid, Spain
-->

<project name="absi-cl-aladinlite-widget" default="final" xmlns:cl="antlib:net.jtools.classloadertask" basedir=".">

    <description>
      absi-cl-aladinlite-widget  -  Absi AladinLite GWT Widget
  </description>

    <property file="build.properties" />
    <property file="build.properties.defaults" />
    <import file="ivy-tasks.3.0.xml" />

    <path id="subant.path">
    </path>

    <fileset id="lib.fileset" dir="${lib.dir}">
        <include name="*.jar" />
    </fileset>

    <path id="build.path">
        <fileset refid="lib.fileset" />
    </path>

    <path id="test.path">
        <path refid="build.path" />
        <pathelement location="${build.classes.dir}" />
    </path>

    <target name="all" depends="final, test, docs, check" description="Build, pack, test, document and check the application" />

    <target name="clean" depends="ivy-clean-jars,ivy-clean-cache" description="Clean up the environment">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${final.dir}" />
        <delete dir="${deploy.classes.dir}" />
        <delete dir="${deploy.gwtout.dir}" />
        <delete dir="${gwt.localcache.dir}" />
    </target>

    <target name="init" depends="ivy-retrieve" description="Initialise the environment">
        <tstamp />
        <mkdir dir="${build.dir}" />
    </target>

    <target name="build" depends="init" description="Compile the java sources">
        <mkdir dir="${build.classes.dir}" />

        <javac srcdir="${java.dir}" 
            destdir="${build.classes.dir}" classpathref="build.path" 
            source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}" 
            nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}" />

        <copy todir="${build.classes.dir}">
            <fileset dir="${java.dir}" />
        </copy>

    </target>

    <target name="dist" depends="build" description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
        <mkdir dir="${dist.dir}" />

        <jar destfile="${dist.jar.file}" basedir="${build.classes.dir}"
                     manifest="${conf.manifest.file}" compress="${jar.compress}"
                     index="${jar.index}" update="${jar.update}" filesetmanifest="merge">
        </jar>            

    </target>

    <target name="final" depends="dist" description="Make the final distribution group of files">
        <mkdir dir="${final.dir}" />

        <copy todir="${final.dir}" verbose="true" overwrite="true">
        			<fileset dir="${dist.dir}"/>
        			<fileset dir="${lib.dir}">
        				<exclude name="junit*" />
        				<exclude name="checkstyle*" />
        			</fileset>
        </copy>

    </target>
   
    <target name="gwt-pre-compile" depends="init" description="Compile java source to bytecode">
        <mkdir dir="${deploy.classes.dir}" />
        <mkdir dir="${deploy.gwtoutput.dir}" />

        <javac srcdir="${java.dir}" includes="**" encoding="utf-8" classpathref="build.path" 
            destdir="${deploy.classes.dir}" 
            source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" 
            debug="${javac.debug}" debuglevel="lines,vars,source">
        </javac>

        <copy todir="${deploy.classes.dir}">
            <fileset dir="${java.dir}" excludes="**/*.java" />
        </copy>
    </target>

    <target name="gwt-compile" depends="gwt-pre-compile" description="GWT compile to JavaScript (production mode)">

        <input message="On which target do you want to deploy today ? " addproperty="deploy.target" validargs="local,int,dev,oper" defaultvalue="int" />
        <property file="build.properties.${deploy.target}" />
        <subant buildpathref="subant.path" target="build" failonerror="true">
            <property name="deploy.target" value="${deploy.target}" />
        </subant>

        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
            <classpath>
                <pathelement location="${java.dir}" />
                <pathelement location="${deploy.classes.dir}" />
                <path refid="build.path" />
            </classpath>
            <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
            <jvmarg value="-Xmx256M" />
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}" />
            <arg value="${gwt.entrypoint}" />
        </java>
    </target>


    <target name="gwt-compile-report" depends="gwt-pre-compile" description="GWT compile report">

        <echo message="Generating compile report with local properties (loading build.properties.local)" />
        <property file="build.properties.local" />
        <subant buildpathref="subant.path" target="build" failonerror="true">
            <property name="deploy.target" value="local" />
        </subant>

        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
            <classpath>
                <pathelement location="${java.dir}" />
                <pathelement location="${deploy.classes.dir}" />
                <path refid="build.path" />
            </classpath>
            <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
            <!-- Increase memory compared to standard gwt-compile -->
            <jvmarg value="-Xmx1024M" />
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args} -compileReport" />
            <arg value="${gwt.entrypoint}" />
        </java>
    </target>

    <target name="build-tests" depends="build" description="Compiles test code">
        <mkdir dir="${build.testclass.dir}" />
        <javac srcdir="test" includes="**" destdir="${build.testclass.dir}" classpathref="test.path" source="${javac.source}" target="${javac.target}" compiler="${javac.compiler}" nowarn="${javac.nowarn}" debug="${javac.debug}" />

        <copy todir="${build.testclass.dir}">
            <fileset dir="test" />
        </copy>
    </target>

    <target name="test-dev" depends="build-tests" description="Run the unit tests in development mode">
        <mkdir dir="${build.jureport.dev.dir}" />

        <junit fork="${junit.fork}" printsummary="${junit.summary}" haltonfailure="${junit.halt}" showoutput="${junit.output}">
            <jvmarg line="-Xmx256m" />
            <sysproperty key="gwt.args" value="-standardsMode -logLevel WARN" />
            <sysproperty key="java.awt.headless" value="true" />
            <classpath>
                <path refid="test.path" />
                <pathelement location="${build.testclass.dir}" />
                <pathelement location="${java.dir}" />
            </classpath>
            <batchtest todir="${build.jureport.dev.dir}">
                <fileset dir="test">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
            <formatter type="plain" />
            <formatter type="xml" />
        </junit>

        <junitreport todir="${build.jureport.dev.dir}">
            <fileset dir="${build.jureport.dev.dir}" includes="TEST-*.xml" />
            <report todir="${build.jureport.dev.dir}" />
        </junitreport>
    </target>

    <target name="test-prod" depends="build-tests" description="Run the unit tests in production mode">
        <mkdir dir="${build.jureport.prod.dir}" />

        <junit fork="${junit.fork}" printsummary="${junit.summary}" haltonfailure="${junit.halt}" showoutput="${junit.output}">
            <jvmarg line="-Xmx256m" />
            <sysproperty key="gwt.args" value="-prod -standardsMode -logLevel WARN -standardsMode -out ${build.testwar.dir}" />
            <sysproperty key="java.awt.headless" value="true" />
            <classpath>
                <path refid="test.path" />
                <pathelement location="${build.testclass.dir}" />
                <pathelement location="${java.dir}" />
            </classpath>
            <batchtest todir="${build.jureport.prod.dir}">
                <fileset dir="test">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
            <formatter type="plain" />
            <formatter type="xml" />
        </junit>

        <junitreport todir="${build.jureport.prod.dir}">
            <fileset dir="${build.jureport.prod.dir}" includes="TEST-*.xml" />
            <report todir="${build.jureport.prod.dir}" />
        </junitreport>
    </target>

    <target name="test" depends="test-dev, test-prod" description="Run the unit tests in development and production mode">
    </target>

    <target name="docs" depends="init" description="Generate the API javadoc (and other documentation files)">
        <mkdir dir="${build.javadoc.dir}" />

        <javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}" source="${javac.source}" packagenames="${javadoc.packages}" access="${javadoc.access}" failonerror="${javadoc.fail}">
            <classpath refid="build.path" />
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
        </javadoc>
    </target>

    <target name="check" depends="build" description="Check the sources for style violations (and report them)">
        <mkdir dir="${build.csreport.dir}" />
        <taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}" />

        <checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
            <classpath>
                <path refid="build.path" />
                <pathelement location="${build.classes.dir}" />
            </classpath>
            <fileset dir="${java.dir}" includes="**/*.java" />
            <formatter type="xml" tofile="${build.csreport.dir}/csreport.xml" />
        </checkstyle>

        <xslt basedir="${build.csreport.dir}" includes="*.xml" destdir="${build.csreport.dir}" style="${checkstyle.style}">
            <param name="output.dir" expression="${build.csreport.dir}" />
            <param name="source.dir" expression="${basedir}/${java.dir}/" />
        </xslt>
    </target>
</project>
